#Zadatak 2.
>>>Ispiši tekst "Prvi redak".

print("Prvi redak")

>>>Definiraj x=2 te ispiši tekst "x je jednak" te vrijednost od x.

x=2
print("x je jednak", x)

>>>Definiraj x=2 i y=5 te ispiši rezultat logičke provjere je li x veći ili jednak od y.

x=2
y=5
print("x je veći ili jednak y", x >= y)

>>>Definiraj x=2, y=5, z=7. Ispiši rezultat aritmetičke operacije y^x * logz.

import numpy as np

x=2
y=5
z=7

rezultat=np.power(y,x)*np.log(z)
print(rezultat) 

#drugi način

import numpy as np
x=2
y=5
z=7
print(y**x*np.log(z))

#log računa ln, a log10 računa log, ali ako ne piše podrazumijeva se da trebamo ln

#Zadatak 3.
>>>Kreiraj if naredbu koja za zadani broj x ispisuje "Broj nije izdvojenica", ako se nalazi između -3 i 3. U protivnom if naredba ispisuje "Broj je izdvojenica". (Uputa: Na početku zadajte da je 
 te provjerite točnost if naredbe. Mijenjajte vrijednost x kako bi se uvjerili funkcionira li sve točno.

x=2

if ((x<-3) or  (x>3)):
    print ("Broj nije izdvojenica")
else:
    print ("Broj je izdvojenica")

>>>Kreiraj for naredbu koja iterira po elementima liste [11,13,17,19] te ispisuje elemente liste.

x=[11,13,17,19]

for i in x:
    print(i)

#drugi način

for x in [11, 13, 17,19]:
    print(x)

>>>Kreiraj for naredbu koja iterira po elementima liste [11,13,17,19] te ispisuje True ako se broj čita isto s lijeva i s desna.

brojevi = [11, 13, 17, 19]

for i in brojevi:
    str_i = str(i)
    if str_i == str_i[::-1]:
        print(True)
    else:
        print(False)

#drugi način

for x in [11, 13, 17,19]:
    if((x%10) == (x//10)):
        print("True")

#možemo i samo if x==11, print True

#Zadatak 4. Učitaj paket NumPy pod alisom np te riješi sljedeće zadatke:
>>>Definiraj matricu nula 4x7, oznaka: A.

import numpy as np

A=np.zeros((4,7))
print(A)

>>>Definiraj matricu jedinica 4x7, oznaka: B.

B=np.ones((4,7))
print(B)

>>>Definiraj matricu slučajnih brojeva iz jednolike distribucije s modalitetima 0,1,2,3,4, dimenzija 4x4, oznaka: C. 
Izračunaj C^2 i CxC. Razlikuju li se rezultati? Objasni.

C=np.random.randint(0,5,(4,4))

print(C)

#potenciranje elemenata
print(C**2)

#mnozenje matrica
print(np.dot(C,C))

#Radi se o različitim operacijama

Rezultati se razlikuju jer kod kvadriranja rezultat je matrica u kojoj je svaki element kvadriran, a kod množenja se vrši matrično množenje.

>>>Definiraj matricu D proizvoljnih dimenzija te ispiši njen broj stupaca i redaka.

D=np.array([[11, 13, 17, 19], [10, 12, 16, 18]])
print(D)

print("oblik matrice", np.shape(D))

>>> Definiraj matricu E dimenzija 20x1 koja sadrži slučajne brojeve iz uniformne distribucije s modalitetima u [0,1].
Ispiši prvi element, sedmi element, te predzadnji element.

np.random.seed(seed=1)
E=np.random.random((20,1))
print(E)

print("1. element \n", E[0])
print("7. element \n", E[6])
print("predzadnji element \n", E[-2])  #drugi način print(E[18])


>>>Definiraj matricu F proizvoljnih dimenzija (broj redaka i stupaca je veći od 5) te ispiši parne retke.

F=np.random.random((6,6))
print(F)

print("\n parni retci", F[1:6:2,:]) #2. redak do 6. retka po 2

>>>Definiraj matricu G proizvoljnih dimenzija (broj redaka i stupaca je veći od 5) te ispiši maksimalni element matrice,
poziciju maksimalnog elementa te maksimum po stupcima.

G=np.random.randint(0,10,(6,7))

print(G)
print(np.max(G))
print(np.argmax(G))
print(np.max(G,axis=0))

#Zadatak 5. Učitaj podatke iz csv GTzadaci.csv. U dokumentu se nalaze tri Google Trends niza koji prikazuju popularnost pojmova: financije, inflacija i recesija te Indeks pouzdanja potrošača (Consumer Confidence Index, CCI).
Google Trends podaci se interpretiraju kao popularnost pretraživanja pojma, dok CCI odražava pouzdanje. 
Svi podaci su izračunani za Hrvatsku za period 01/2020 - 11/2023. Riješi sljedeće zadatke:
>>>Objasni značenje index_col=0 i parse_dates=True.

#index.col=0 ako želimo da se prvi stupac u dokumentu koristi kao oznaka retka
#parse_dates=True naglašava Pythonu da se radi o vremenskom nizu podataka

>>>Objasni elemente objekta data: columns, index i values.

#columns je oznaka stupca, index je oznaka retka, a values se odnosi na podatke koji su pohranjeni u data frameu(matrica podataka)

>>> Ispiši prvi redak i prvi stupac. Objasni što prikazuju ispisani podaci.

print(data.iloc[0,:])
print(data.iloc[:,0])

#zašto je njoj ovdje ispisalo inflaciju, tj. 2.stupac????

#u ispisu prvog retka vidljivi su nazivi stupaca, tj. njihove oznake
#u ispisu prvog stupca vidljivi su podaci o popularnosti pojma financije

>>>Pomoću for petlje izračunaj prvu diferenciju za niz inflacija i prikaži ga grafički.

delta = pd.DataFrame(np.nan, index=data.index, columns=data.columns)
#print(delta)
#nan je funkcija "nepostojeća vrijednost"

[m,n]=data.shape #m-broj redaka, n-broj stupaca

# 2. stupac
for i in range(1,m): #krećemo od drugog retka jer nemamo vrijednosti prije 1.razdoblja
    delta.iloc[i,1]=data.iloc[i,1]-data.iloc[(i-1),1] #punimo 2. stupac, trebaju nam diferencije znači vrijednost danas-vrijednost jučer

print(delta.iloc[:,1]) #ili print(delta.iloc[:,:]) ako želimo cijelu tablicu

#grafički prikaz
import matplotlib.pyplot as plt

plt.plot(delta.loc["2010-01-01":,"inflacija"], label=delta.columns[1])

plt.xlabel("Mjeseci")
plt.ylabel("Prva diferencija")
plt.title("Google Trends podaci")
#plt.yticks([0,25,50,75,100])
#plt.grid(True)
plt.legend(loc='upper left', fontsize='small')

plt.show()
plt.close()

#drugi način

[m,n]=data.shape

#Ovo bi mogli bolje napisati tako da delta sadrži samo jedan stupac, bolje rješenje bi bilo columns=data.columns[0:1]
#i kasnije u tekstu pišemo delta.iloc[i,0]
#Ostavljam prvu verziju kako smo na ponavljanju radili
delta = pd.DataFrame(np.nan, index=data.index, columns=data.columns)

# trebamo za inflaciju - to je drugi stupac u excelu, numerirano u DataFrame  s 1
for i in range(1,m):
    delta.iloc[i,1]=data.iloc[i,1]-data.iloc[(i-1),1]

print(delta.iloc[:,1])

#grafički
import matplotlib.pyplot as plt

plt.plot(delta.iloc[:,1], label="Inflacija")
plt.show()
plt.close()

#niz je stacionaran
#povećanje varijabilnosti u vrijeme pandemije
#prosjek je 0
#nema sistematičnog kretanja u stopi promjene 

>>> Grafički prikaži sva tri GT indikatora, što zaključuješ?

plt.plot(data.iloc[:,0:3], label=data.columns[0:3])
plt.legend(loc='upper left', fontsize='small')
plt.show()
plt.close()

#Iz grafičkog prikaza možemo zaključiti da popularnost pretraživanja "financija" konstantno varira, stacionarnost niza?
#Za pojam inflacije vidimo značajan rast popularnosti poslije 2020. - pandemija.
#Za pojam recesije također vidimo manji porast 2020.
#Pouzdanje potrošača varira, raste polako nakon globalne krize 2008., a zatim 2020. opet doživljava pad s obzirom na pandemiju.

>>>Pomoću scatter plota prikaži GT indikatore recesija i inflacija, što zaključuješ?

plt.style.use("classic")

plt.scatter(data["recesija"],data["inflacija"])

plt.title("Dijagram rasipanja")

plt.show()
plt.close()

#drugi način

plt.scatter(data.iloc[:,2],data.iloc[:,1])

plt.title("Dijagram rasipanja")

plt.show()
plt.close()

#Iz dijagrama rasipanja možemo uočiti da ne postoji veza između popularnosti pojmova recesija i inflacija ni u kojem smjeru. 
#Podaci su grupirani na početku, ali nema očite veze između njih, dok s vremenskom odmakom ikakva povezanost iščezava.
#nema sistematičnog ponašanja

>>>Prikaži distribuciju GT indikatora za recesiju, što zaključuješ?

plt.style.use("classic")

plt.hist(data["recesija"],bins=5,range=[0,100])

plt.xlabel("Mjeseci")
plt.ylabel("Indeks")
plt.title("Distribucija popularnosti pojma recesija")

plt.show()
plt.close()

#drugi način

plt.hist(data["recesija"],bins=5,range=[0,100])

plt.show()
plt.close()
#Histogram prikazuje distribuciju - odgovara na pitanje koliko su česte vrijednosti indikatora.
#Najčešća je niska popularnost pretraživanja pojma "recesija" a to ćemo potvrditi i kad prikažemo sljedeći grafikon.

#iz histograma možemo zaključiti da je najveća frekvencija u razredu 0-20, što znači da pojam recesija nije popularan.

>>>Definiraj novi indikator kao omjer GT indikatora recesija i inflacija. Prikaži ga grafički i izračunaj deskriptivnu analizu. Što zaključuješ?

#novi inidikator
data["ratio"]=data["recesija"]/data["inflacija"]*100
print(data)

#grafički prikaz
plt.plot(data.loc[:,"ratio"], label=data.columns[4])

plt.xlabel("Mjeseci")
plt.ylabel("Indeks")
plt.title("Google Trends podaci")
#plt.yticks([0,25,50,75,100])
#plt.grid(True)
plt.legend(loc='upper left', fontsize='small')

plt.show()
plt.close()

#deskriptivna
ratio=data["recesija"]/data["inflacija"]*100
descriptives = ratio.describe()

print(descriptives)

#drugi način

ratio =data["recesija"]/data["inflacija"]*100

#print(ratio)

plt.plot(ratio)

plt.show()
#plt.close()

print(data["inflacija"])
#Postoje vrijednosti 1 za inflaciju zbog kojih niz ima ekstremne vrijednosti na početku. Može se pogledati
#grafikon na kojem odrežemo problematičan početak kako bi se bolje vidjela dinamika 

#print(ratio)
#bez prve dvije godine
plt.plot(ratio.iloc[24:])

plt.show()
#plt.close()

#Prosječna vrijednost omjera iznosi 115,47 - recesija je u prosjeku popularnija od inflacije kao pojam pretraživanja.
#Standardna devijacija iznosi 517,46 - velika varijabilnost 
#Prvih 50% podataka o iznosu omjera ima vrijednost 38,09 i manje, dok ostalih 50% podataka ima vrijednost 38,09 i više. - inflacija bi onda bila popularna
#možemo pretpostaviti da imamo outliere koji jako utječu na prosjek i iskrivljavaju sliku o popularnosti pretraživanja.


#Zadatak 6. Učitaj podatke iz csv GTzadaci.csv. Riješi sljedeće zadatke:
>>>Izračunajte stopu promjene za GT indikatore po formuli gt=lnGTt-lnGTt-12*100. (Uputa: prethodno korigiraj 0 u 1 zbog logaritma.)

# Change elements equal to 0 to 1
data[data.values == 0] = 1

# Calculate natural logarithm for all columns except the last one
log_data = np.log(data.iloc[:, :-1])

# Create 'delta_log' DataFrame filled with NaN values for all columns except the last one
delta_log = pd.DataFrame(np.nan, index=log_data.index, columns=log_data.columns)

[m, n] = log_data.shape  # m - number of rows, n - number of columns

# Calculate rate of change for natural logarithm for all columns except the last one between time t and time t-12
for j in range(n):
    for i in range(12, m):
        delta_log.iloc[i, j] = log_data.iloc[i, j] - log_data.iloc[i - 12, j]

# Print the result
print("stope promjene")
print(delta_log) 

#drugi način - PROF

#delta=dat.diff(periods=1,axis=0)

logGT=np.log(data.iloc[:,0:3])

gt=logGT.diff(periods=12,axis=0)*100

>>>Izračunajte diferenciju promjene za CCI indikator po formuli deltaCCIt=CCIt-CCIt-12.

delta_last_column = pd.DataFrame(np.nan, index=data.index, columns=[data.columns[-1]])

[m, n] = data.shape  # m - number of rows, n - number of columns

# Calculate differences for the last column between time t and time t-12
delta_last_column.iloc[12:, 0] = data.iloc[12:, -1].values - data.iloc[:-12, -1].values

# Print the result
print("stope promjene CCI:")
delta_last_column.rename(columns={'CCI': 'deltaCCI'}, inplace=True)
print(delta_last_column)

#može samo i diff funkcija-PROF

deltaCCI=data["CCI"].diff(periods=12)
print(deltaCCI)

>>>Procijeni regresijski model i napiši regresijsku jednadžbu. deltaCCIt=ß0 + ß1gt,recesija + et

#slope je ß1
#intercept je ß0

#treba maknuti prvih 12 podataka zbog NaN
X = gt.iloc[12:167, 2].values.reshape(-1, 1)  
Y = deltaCCI.iloc[12:167].values.reshape(-1, 1)  

#koristimo ovaj paket jer nas traži procjenu jednadžbe
import statsmodels.api as sm

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

deltaCCI=1,28 - 0,01gt,recesija

#možemo i dodati ovaj korak prije da nam procijeni regresiju:

import numpy as np #izračuni
import pandas as pd #učitavanje data framea
import matplotlib.pyplot as plt #vizualizacija
from sklearn.linear_model import LinearRegression #procjene modela, paket: scikit-learn

X = gt.iloc[12:167, 2].values.reshape(-1, 1)  
Y = deltaCCI.iloc[12:167].values.reshape(-1, 1)  
# -1 znači da python sam prepozna koliko ima redaka, 1 znači da objekt treba imati jedan stupac

#stvara objekt za linearnu regresiju
linear_regressor = LinearRegression()  

linear_regressor.fit(X, Y)  # perform linear regression
Y_pred = linear_regressor.predict(X)  # make predictions

>>> Izračunaj regresijske vrijednosti te ih ucrtaj na dijagram rasipanja. Što zaključuješ?

Y_pred = linear_regressor.predict(X)  # make predictions

plt.scatter(Y, Y_pred)

#nema sistematičnog ponašanja

>>>Ocijeni fit prethodnog modela tako da koristiš barem dva različita indikatora. Što zaključuješ?
#komentiramo test značajnosti i R2

#R2=0,043 -> niska vrijednost, svega 4,3% odstupanja je objašnjeno modelom.
#za x1(recesija), p-vrijednost(0,010) je manja od alfa za 5%, što znači da je varijabla recesija statistički značajna u modelu. 

>>>Procijeni model pomoću statsmodels.api libraryija. Komentiraj rezultate testa značajnosti nezavisnih varijabli.

import statsmodels.api as sm

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#može i samo reg_a.summary() jer smo već prije procijenili model

#p-vrijednost=0,010
#ako je alfa=5%, p-vrijednost je manja od alfa, odbacujemo nultu hipotezu i zaključujemo da je varijabla gt,recesija statistički značajna u modelu

#Zadatak 7.  Koristeći podatke definirane u Zadatku 6 izračunaj sljedeće zadatke:
>>> Procijeni linerni regresijski model kao prvi samo su nam svi gt indikatori nezavisne varijable te napiši procijenjenu jednadžbu.

import numpy as np #izračuni
import pandas as pd #učitavanje data framea
import matplotlib.pyplot as plt #vizualizacija
from sklearn.linear_model import LinearRegression #procjene modela, paket: scikit-learn

X = gt.iloc[12:167, 0:3].values.reshape(-1, 3)  
Y = deltaCCI.iloc[12:167].values.reshape(-1, 1)  
# -1 znači da python sam prepozna koliko ima redaka, 1 znači da objekt treba imati jedan stupac

#stvara objekt za linearnu regresiju
linear_regressor = LinearRegression()  

linear_regressor.fit(X, Y)  # perform linear regression
Y_pred = linear_regressor.predict(X)  # make predictions

deltaCCI=1,35 - 0,04gt,financije - 0,02gt,inflacija - 0,01gt,recesija

>>>Procijeni model pomoću statsmodels.api libraryija. Komentiraj rezultate testa značajnosti nezavisnih varijabli.

import statsmodels.api as sm

#X = gt.iloc[12:167, 2].values.reshape(-1, 1)  
#Y = deltaCCI.iloc[12:167].values.reshape(-1, 1) 

X = gt.iloc[12:167, 0:3].values.reshape(-1, 3)  

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#Usporedbom p-vrijednosti i alfa na 5%, recesija i inflacija su statistički značajne u modelu, dok financije nisu. 

>>> Ocijeni fit prethodnog modela tako da koristiš barem dva različita indikatora. Što zaključuješ?

#ne vrtimo dodatni kod jer u prethodnom imamo sve izračunato

====
	R-squared:	0.087
	Adj. R-squared:	0.069
	AIC:	1098.

	
#koeficijent determinacije samo 8,7%, AIC i BIC relativno veliki, znači da je model loš.

>>> Usporedi fit prethodnog modela i modela iz Zadatka 5 tako da koristiš barem dva različita indikatora. Što zaključuješ?

#ispis za model iz prošlog zadatka
R-squared:	0.043
Adj. R-squared:	0.037
AIC:	1101


#Koeficijent determinacije nije baš mjerodavan za usporedbu jer smo u ovaj model dodali više varijabli pa ćemo gledati korigirani.
#Za 1. model je korigirani R2=0,037 a za 2. model=0,069 iz čega zaključujemo da je 2. model bolji jer je korigirani R2 veći.
#ako uspoređujemo informacijske kriterije, AIC za 1. model=1101, a za 2. model=1098 -> bolji je 2.model jer je AIC manji

#da izračunamo RMSE za 2. model (ubacili smo u dio koda gdje smo procijenili regresiju)
RMSE=np.sqrt(np.mean(((Y-Y_pred)**2))) #prosječno kvadratno odstupanje 
print(RMSE)


>>>Zadatak 8.: Procijeni tri modela jednostavne linearne regresije gdje je y=CCI, a x=jedna od GT varijabli. Usporedi modele i odaberi finalni model. (Uputa: Potrebno je obrazložiti svaku odluku.
Ovaj zadatak može se riješiti na više načina s različitim rješenjima, no važno je da je vaš slijed zaključivanja logičan.)

#1. model
#financije
X = gt.iloc[12:167, 0].values.reshape(-1, 1) 

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#2. model
#inflacija
X = gt.iloc[12:167, 1].values.reshape(-1, 1) 

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#3. model
#recesija
X = gt.iloc[12:167, 2].values.reshape(-1, 1) 

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

model 1                 model 2              model 3 

R2adj=0,000            R2adj=0,030         R2adj=0,037
AIC=1107               AIC=1102             AIC=1101


#po svim kriterijima, model 3 je najbolji - R2adj, najmanji AIC
#sljedeći "najbolji" je model 2 i zatim model 1, iako su oba zapravo dosta loša
#iako je model 3 najbolji od ovih navedenih, on i dalje nije idealan budući da ima dosta nizak koeficijent determinacije pa ne objašnjava najbolje zavisnu varijablu



>>>Zadatak 9: Između modela koji sadrže dvije nezavisne varijable (GT indikatore) i y=CCI odaberi najbolji. Obrazloži zaključivanje.

import pandas as pd
import statsmodels.api as sm
from itertools import combinations
from sklearn.metrics import mean_squared_error
import numpy as np

# Assuming your data is stored in a DataFrame called 'df'
# Make sure to replace 'YourDataFrame' with the actual name of your DataFrame

# Extract the column names of potential independent variables
independent_vars = ['financije', 'inflacija', 'recesija']

# CCI is the dependent variable
dependent_var = 'CCI'

# Initialize an empty list to store regression results and RMSE
results = []

# Iterate through all combinations of 2 independent variables
for combo in combinations(independent_vars, 2):
    # Extract the current combination
    current_vars = list(combo)

    # Prepare the independent variables
    X = data[current_vars]

    # Add a constant term to the independent variables matrix
    X = sm.add_constant(X)

    # CCI is the dependent variable
    y = data[dependent_var]

    # Fit the linear regression model
    model = sm.OLS(y, X).fit()

    # Make predictions
    y_pred = model.predict(X)

    # Calculate RMSE
    rmse = np.sqrt(mean_squared_error(y, y_pred))

    # Store the results in the list
    results.append({'Independent Variables': current_vars, 'Model': model, 'RMSE': rmse})

# Print the regression results and RMSE for each combination
for result in results:
    print(f"Independent Variables: {result['Independent Variables']}")
    print(result['Model'].summary())
    print(f"RMSE: {result['RMSE']}")
    print("\n" + "="*50 + "\n")


#############################################################################
#drugi način da svaki posebno računamo:

#financije i inflacija
X = gt.iloc[12:167, [0,1]].values.reshape(-1, 2) 

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#financije i recesija
X = gt.iloc[12:167, [0,2]].values.reshape(-1, 2) 

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#inflacija i recesija
X = gt.iloc[12:167, [1,2]].values.reshape(-1, 2) 

X0=sm.add_constant(X)
reg_a=sm.OLS(Y,X0).fit()

reg_a.summary()

#############################################################################


#uspoređivali smo R2, R2adj, AIC, BIC i RMSE
#možemo zaključiti da je model 2 najbolji, tj. onaj u kojem je x1=financije, a x2=recesija - najveći R2 i R2adj, najmanji BIC i AIC, najmanji RMSE
#jednadžba tog modela: CCIt=-6,93 - 0,14gt,financije - 0,46gt,recesija

>>>Zadatak 10: Koji indikator se može koristiti za uspoređivanje modela u Zadatku 8 i Zadatku 9? Obrazloži. 
(Uputa: Navedi barem jedan indikator.)

#Da bismo međusobno uspoređivali modele iz zadatka 8 i zadatka 9 možemo koristiti korigirani koeficijent determinacije, jer on nije osjetljiv na povećanje broja
varijabli u modelu kao koeficijent determinacije. Nadalje, možemo koristiti RMSE ili informacijske kriterije koji su bazirani na vjerodostojnosti. 

>>>Zadatak 11: Procijeni tri modela jednostavne linearne regresije gdje je y=CCI, a x=jedna od GT varijabli. Odaberi optimalni model pomoću korigiranog 
R2 i AIC. Razlikuju li se odluke?

#te smo modele već procijenili u Zad.8. pa ćemo samo prekopirati rezultate

model 1                 model 2              model 3 

R2=0,097                R2=0,013             R2=0,243
R2adj=0,091             R2adj=0,007          R2adj=0,239
AIC=1256                AIC=1271             AIC=1227
BIC=1263                BIC=1277             BIC=1233
RMSE1 10.28             RMSE2 10.75          RMSE3 9.41

#po R2adj, model 3 je najbolji model
#po AIC je model 3 također najbolji 
#u modelu 3 je nezavisna varijabla recesija

>>>Zadatak 12:Procijeni tri modela jednostavne linearne regresije gdje je y=CCI, a u prvom modelu x=GT(financije), u drugom x=GT(financije) i GT(recesija) a u trećem x=GT(financije), GT(recesija) i GT(inflacija). 
Odaberi optimalni model pomoću korigiranog 
koeficijenta determinacije i AIC. Obrazloži zaključivanje. Razlikuju li se odluke?

#jednostavna regresija treba imati jednu nezavisnu varijablu??

#prethodna 2 smo već procijenili, samo moramo 3.

import statsmodels.api as sm

# Assuming 'data' is your DataFrame with multiple independent variables (X1, X2, X3, ...)
# and a dependent variable 'Y'
X = data[['financije', 'recesija', 'inflacija']]  # Include all independent variables
Y = data['deltaCCI']

# Add a constant term to the independent variables
X0 = sm.add_constant(X)

# Fit the OLS regression model
reg_a = sm.OLS(Y, X0).fit()

# Display the summary tistics
print(reg_a.summary())

#######################################

model 1               model 2             model 3
R2adj=0,091           R2adj=0,277         R2adj=0,282
AIC=1256              AIC=1219            AIC=1219

#po korigiranom koeficijentu determinacije, odabrali bi model 3
#po AIC ne bismo mogli donijeti odluku, tj. indiferentni smo na odabir modela 2 ili modela 3

>>>Zadatak 13.:Podijeli podatke tako da training dio zauzima 70% podataka.
Procijeni tri modela jednostavne linearne regresije gdje je y=CCI, a u prvom modelu x=GT(financije), u drugom x=GT(financije) i GT(recesija) a u trećem x=GT(financije), GT(recesija) i GT(inflacija).
Odaberi optimalni model na test dijelu podataka pomoću RMSE. Obrazloži zaključivanje.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np

# Assuming your data is stored in a DataFrame called 'df'
# Make sure to replace 'YourDataFrame' with the actual name of your DataFrame

# Extract the column names of potential independent variables
independent_vars_1 = ['financije']
independent_vars_2 = ['financije', 'recesija']
independent_vars_3 = ['financije', 'recesija', 'inflacija']
dependent_var = 'CCI'

# Split the data into training and testing sets (70% train, 30% test)
train_data, test_data = train_test_split(data, test_size=0.3, random_state=42)

# Function to estimate linear regression model and calculate RMSE
def estimate_model(independent_vars, train_data, test_data):
    X_train = train_data[independent_vars].values.reshape(-1, len(independent_vars))
    y_train = train_data[dependent_var].values
    X_test = test_data[independent_vars].values.reshape(-1, len(independent_vars))
    y_test = test_data[dependent_var].values

    # Initialize and fit the linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate RMSE
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))

    return model, rmse

# Estimate three models
model_1, rmse_1 = estimate_model(independent_vars_1, train_data, test_data)
model_2, rmse_2 = estimate_model(independent_vars_2, train_data, test_data)
model_3, rmse_3 = estimate_model(independent_vars_3, train_data, test_data)

# Print the results
print("Model 1 - Independent Variable: financije")
print(f"RMSE: {rmse_1}\n")

print("Model 2 - Independent Variables: financije, recesija")
print(f"RMSE: {rmse_2}\n")

print("Model 3 - Independent Variables: financije, recesija, inflacija")
print(f"RMSE: {rmse_3}\n")

##########################################################################
Model 1 - Independent Variable: financije
RMSE: 11.54

Model 2 - Independent Variables: financije, recesija
RMSE: 10.08

Model 3 - Independent Variables: financije, recesija, inflacija
RMSE: 10.27

#na temelju RMSE odabiramo model 2 jer je njegov RMSE najmanji

>>>Zadatak 14: Podijeli podatke tako da training dio zauzima 70% podataka.
Procijeni tri modela jednostavne linearne regresije gdje je y=CCI, a u prvom modelu x=GT(financije), u drugom x=GT(financije) i GT(recesija) a u trećem x=GT(financije), GT(recesija) i GT(inflacija).
Odaberi optimalni model na test dijelu podataka pomoću MAE. Obrazloži zaključivanje.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import numpy as np

# Assuming your data is stored in a DataFrame called 'df'
# Make sure to replace 'YourDataFrame' with the actual name of your DataFrame

# Extract the column names of potential independent variables
independent_vars_1 = ['financije']
independent_vars_2 = ['financije', 'recesija']
independent_vars_3 = ['financije', 'recesija', 'inflacija']
dependent_var = 'CCI'

# Split the data into training and testing sets (70% train, 30% test)
train_data, test_data = train_test_split(data, test_size=0.3, random_state=42)

# Function to estimate linear regression model and calculate MAE
def estimate_model(independent_vars, train_data, test_data):
    X_train = train_data[independent_vars].values.reshape(-1, len(independent_vars))
    y_train = train_data[dependent_var].values
    X_test = test_data[independent_vars].values.reshape(-1, len(independent_vars))
    y_test = test_data[dependent_var].values

    # Initialize and fit the linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate MAE
    mae = mean_absolute_error(y_test, y_pred)

    return model, mae

# Estimate three models
model_1, mae_1 = estimate_model(independent_vars_1, train_data, test_data)
model_2, mae_2 = estimate_model(independent_vars_2, train_data, test_data)
model_3, mae_3 = estimate_model(independent_vars_3, train_data, test_data)

# Print the results
print("Model 1 - Independent Variable: financije")
print(f"MAE: {mae_1}\n")

print("Model 2 - Independent Variables: financije, recesija")
print(f"MAE: {mae_2}\n")

print("Model 3 - Independent Variables: financije, recesija, inflacija")
print(f"MAE: {mae_3}\n")

#########################################################################
Model 1 - Independent Variable: financije
MAE: 9.82803433726367

Model 2 - Independent Variables: financije, recesija
MAE: 8.408569728320906

Model 3 - Independent Variables: financije, recesija, inflacija
MAE: 8.670635315847367

#na temelju MAE najbolji je model 2 jer je MAE najmanji

>>>Zadatak 15.: Zadatak 15: Podijeli podatke tako da training dio zauzima 70% podataka. 
Procijeni tri modela jednostavne linearne regresije gdje je y=CCI, a u prvom modelu x=GT(financije), u drugom x=GT(financije) i GT(recesija) a u trećem x=GT(financije), GT(recesija) i GT(inflacija).
Odaberi optimalni model na test dijelu podataka pomoću MSE. Obrazloži zaključivanje.

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np

# Assuming your data is stored in a DataFrame called 'df'
# Make sure to replace 'YourDataFrame' with the actual name of your DataFrame

# Extract the column names of potential independent variables
independent_vars_1 = ['financije']
independent_vars_2 = ['financije', 'recesija']
independent_vars_3 = ['financije', 'recesija', 'inflacija']
dependent_var = 'CCI'

# Split the data into training and testing sets (70% train, 30% test)
train_data, test_data = train_test_split(data, test_size=0.3, random_state=42)

# Function to estimate linear regression model and calculate MSE
def estimate_model(independent_vars, train_data, test_data):
    X_train = train_data[independent_vars].values.reshape(-1, len(independent_vars))
    y_train = train_data[dependent_var].values
    X_test = test_data[independent_vars].values.reshape(-1, len(independent_vars))
    y_test = test_data[dependent_var].values

    # Initialize and fit the linear regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Make predictions
    y_pred = model.predict(X_test)

    # Calculate MSE
    mse = mean_squared_error(y_test, y_pred)

    return model, mse

# Estimate three models
model_1, mse_1 = estimate_model(independent_vars_1, train_data, test_data)
model_2, mse_2 = estimate_model(independent_vars_2, train_data, test_data)
model_3, mse_3 = estimate_model(independent_vars_3, train_data, test_data)

# Print the results
print("Model 1 - Independent Variable: financije")
print(f"MSE: {mse_1}\n")

print("Model 2 - Independent Variables: financije, recesija")
print(f"MSE: {mse_2}\n")

print("Model 3 - Independent Variables: financije, recesija, inflacija")
print(f"MSE: {mse_3}\n")

##########################################################################
Model 1 - Independent Variable: financije
MSE: 133.0564799710425

Model 2 - Independent Variables: financije, recesija
MSE: 101.69324765722348

Model 3 - Independent Variables: financije, recesija, inflacija
MSE: 105.46172751436197

#prema MSE najbolji je model 2 jer je MSE najmanji

>>>Zadatak 16: Generiraj DataFrame koji sadrži uzorak iz N(1200,50^2) veličine 100. Prvih 10 mjesta u podacima kvadriraj, a drugih 10 kubiraj.
Nacrtaj histogram.

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

mu=1200
sigma=50

n=100

np.random.seed(seed=1)
data=pd.DataFrame(np.random.normal(mu,sigma,size=(n,1)),columns=["A"])

data.iloc[0:10,0]=data.iloc[0:10,0]**2
data.iloc[10:20,0]=data.iloc[10:20,0]**3

plt.hist(data["A"],label=data.columns)

plt.show()
plt.close()

>>>Pretpostavi da je DGP normalna distribucija i procijeni parametre distribucije. Nacrtaj zajedno histogram i procijenjeni DGP, oznaka pDGP.

m1=np.mean(data.values)
s1=np.std(data.values)

plt.hist(data["A"], density=True, alpha=0.5, color='b', edgecolor='black',label="A") #density=true znači da je površina histograma=1

# Overlay the probability density function (PDF) for a normal distribution
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100) #točke na x osi koje idu od xmin do xmax

pdf0 = (1 / (np.sqrt(2 * np.pi) * sigma)) * np.exp(-(x - mu)**2 / (2 * sigma**2))  #formula za krivulju distribucije, teorijska DGP
pdf1 = (1 / (np.sqrt(2 * np.pi) * s1)) * np.exp(-(x - m1)**2 / (2 * s1**2))    #full sample

plt.plot(x, pdf0, 'k', linewidth=1,label="DGP")
plt.plot(x, pdf1, 'k', linewidth=1,ls=":",label="pDGP")


plt.legend(loc='upper left', fontsize='small')

plt.show()
plt.close()

>>> Procijeni koeficijent asimetrije pomoću pDGP i pomoću simulacija. Usporedi: koeficijent asimetrije uzorka, koeficijent asimetrije 
pDGP i koeficijent asimetrije dobiven pomoću simulacija. Objasni rezultate, što zaključuješ iz navedenog?

#TEORIJSKA VRIJEDNOST JE 0 ZA KOEFICIJENT ASIMETRIJE
#PA ONDA RAČUNAMO pomoću simulacija koeficijent asimetrije koji treba ispasti jako blizu 0



